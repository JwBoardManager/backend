// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subsessions.sql

package board

import (
	"context"
)

const createSubsession = `-- name: CreateSubsession :one
INSERT INTO subsessions (id, session_id, subsession_type_id, duration_minutes)
VALUES ($1, $2, $3, $4) RETURNING id, session_id, subsession_type_id, duration_minutes
`

type CreateSubsessionParams struct {
	ID               int64 `json:"id"`
	SessionID        int64 `json:"sessionId"`
	SubsessionTypeID int32 `json:"subsessionTypeId"`
	DurationMinutes  int16 `json:"durationMinutes"`
}

func (q *Queries) CreateSubsession(ctx context.Context, arg CreateSubsessionParams) (Subsession, error) {
	row := q.db.QueryRowContext(ctx, createSubsession,
		arg.ID,
		arg.SessionID,
		arg.SubsessionTypeID,
		arg.DurationMinutes,
	)
	var i Subsession
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.SubsessionTypeID,
		&i.DurationMinutes,
	)
	return i, err
}

const deleteSubsession = `-- name: DeleteSubsession :exec
DELETE FROM subsessions WHERE id = $1
`

func (q *Queries) DeleteSubsession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubsession, id)
	return err
}

const getSubsessionsBySession = `-- name: GetSubsessionsBySession :many
SELECT id, session_id, subsession_type_id, duration_minutes FROM subsessions WHERE session_id = $1
`

func (q *Queries) GetSubsessionsBySession(ctx context.Context, sessionID int64) ([]Subsession, error) {
	rows, err := q.db.QueryContext(ctx, getSubsessionsBySession, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subsession
	for rows.Next() {
		var i Subsession
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.SubsessionTypeID,
			&i.DurationMinutes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubsession = `-- name: UpdateSubsession :exec
UPDATE subsessions SET subsession_type_id = $2, duration_minutes = $3 WHERE id = $1
`

type UpdateSubsessionParams struct {
	ID               int64 `json:"id"`
	SubsessionTypeID int32 `json:"subsessionTypeId"`
	DurationMinutes  int16 `json:"durationMinutes"`
}

func (q *Queries) UpdateSubsession(ctx context.Context, arg UpdateSubsessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSubsession, arg.ID, arg.SubsessionTypeID, arg.DurationMinutes)
	return err
}
