// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart_shifts.sql

package board

import (
	"context"
	"database/sql"
	"time"
)

const createCartShift = `-- name: CreateCartShift :one
INSERT INTO cart_shifts (id, cart_id, shift_day, start_time, end_time)
VALUES ($1, $2, $3, $4, $5) RETURNING id, cart_id, shift_day, start_time, end_time
`

type CreateCartShiftParams struct {
	ID        int64     `json:"id"`
	CartID    int64     `json:"cartId"`
	ShiftDay  int32     `json:"shiftDay"`
	StartTime time.Time `json:"startTime"`
	EndTime   time.Time `json:"endTime"`
}

func (q *Queries) CreateCartShift(ctx context.Context, arg CreateCartShiftParams) (CartShift, error) {
	row := q.db.QueryRowContext(ctx, createCartShift,
		arg.ID,
		arg.CartID,
		arg.ShiftDay,
		arg.StartTime,
		arg.EndTime,
	)
	var i CartShift
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ShiftDay,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteCartShift = `-- name: DeleteCartShift :exec
DELETE FROM cart_shifts WHERE id = $1
`

func (q *Queries) DeleteCartShift(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCartShift, id)
	return err
}

const getAvailableCartShifts = `-- name: GetAvailableCartShifts :many
WITH input_params AS (
    SELECT $1::BIGINT AS cart_id, $2::weekday_enum AS shift_day
),
occupied_shifts AS (
    SELECT start_time, end_time 
    FROM cart_shifts 
    WHERE cart_id = (SELECT cart_id FROM input_params)
    AND shift_day = (SELECT shift_day FROM input_params)
)
SELECT time_slot
FROM generate_series('07:00:00'::TIME, '21:00:00'::TIME, '15 minutes'::INTERVAL) AS time_slot
WHERE NOT EXISTS (
    SELECT 1 FROM occupied_shifts
    WHERE time_slot >= occupied_shifts.start_time AND time_slot < occupied_shifts.end_time
)
ORDER BY time_slot
`

type GetAvailableCartShiftsParams struct {
	Column1 int64  `json:"column1"`
	Column2 string `json:"column2"`
}

func (q *Queries) GetAvailableCartShifts(ctx context.Context, arg GetAvailableCartShiftsParams) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getAvailableCartShifts, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var time_slot sql.NullString
		if err := rows.Scan(&time_slot); err != nil {
			return nil, err
		}
		items = append(items, time_slot)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartShiftsByDay = `-- name: GetCartShiftsByDay :many
SELECT id, cart_id, shift_day, start_time, end_time FROM cart_shifts WHERE shift_day = $1
`

func (q *Queries) GetCartShiftsByDay(ctx context.Context, shiftDay int32) ([]CartShift, error) {
	rows, err := q.db.QueryContext(ctx, getCartShiftsByDay, shiftDay)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CartShift
	for rows.Next() {
		var i CartShift
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.ShiftDay,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartShift = `-- name: UpdateCartShift :exec
UPDATE cart_shifts SET start_time = $3, end_time = $2 WHERE id = $1
`

type UpdateCartShiftParams struct {
	ID        int64     `json:"id"`
	EndTime   time.Time `json:"endTime"`
	StartTime time.Time `json:"startTime"`
}

func (q *Queries) UpdateCartShift(ctx context.Context, arg UpdateCartShiftParams) error {
	_, err := q.db.ExecContext(ctx, updateCartShift, arg.ID, arg.EndTime, arg.StartTime)
	return err
}
