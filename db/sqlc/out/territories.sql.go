// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: territories.sql

package board

import (
	"context"
	"database/sql"
)

const createTerritory = `-- name: CreateTerritory :one
INSERT INTO territories (id, territory_number, location, shapefile, completed_at)
VALUES ($1, $2, $3, $4, NULL) RETURNING id, territory_number, location, shapefile, completed_at
`

type CreateTerritoryParams struct {
	ID              int64  `json:"id"`
	TerritoryNumber int32  `json:"territoryNumber"`
	Location        string `json:"location"`
	Shapefile       []byte `json:"shapefile"`
}

func (q *Queries) CreateTerritory(ctx context.Context, arg CreateTerritoryParams) (Territory, error) {
	row := q.db.QueryRowContext(ctx, createTerritory,
		arg.ID,
		arg.TerritoryNumber,
		arg.Location,
		arg.Shapefile,
	)
	var i Territory
	err := row.Scan(
		&i.ID,
		&i.TerritoryNumber,
		&i.Location,
		&i.Shapefile,
		&i.CompletedAt,
	)
	return i, err
}

const deleteTerritory = `-- name: DeleteTerritory :exec
DELETE FROM territories WHERE id = $1
`

func (q *Queries) DeleteTerritory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTerritory, id)
	return err
}

const getAllTerritories = `-- name: GetAllTerritories :many
SELECT id, territory_number, location, shapefile, completed_at FROM territories
`

func (q *Queries) GetAllTerritories(ctx context.Context) ([]Territory, error) {
	rows, err := q.db.QueryContext(ctx, getAllTerritories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Territory
	for rows.Next() {
		var i Territory
		if err := rows.Scan(
			&i.ID,
			&i.TerritoryNumber,
			&i.Location,
			&i.Shapefile,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompletedTerritories = `-- name: GetCompletedTerritories :many
SELECT id, territory_number, location, shapefile, completed_at FROM territories WHERE completed_at IS NOT NULL
`

func (q *Queries) GetCompletedTerritories(ctx context.Context) ([]Territory, error) {
	rows, err := q.db.QueryContext(ctx, getCompletedTerritories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Territory
	for rows.Next() {
		var i Territory
		if err := rows.Scan(
			&i.ID,
			&i.TerritoryNumber,
			&i.Location,
			&i.Shapefile,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTerritoriesPaginated = `-- name: GetTerritoriesPaginated :many
SELECT id, territory_number, location, shapefile, completed_at FROM territories
ORDER BY completed_at NULLS FIRST, id DESC
LIMIT $1 OFFSET $2
`

type GetTerritoriesPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTerritoriesPaginated(ctx context.Context, arg GetTerritoriesPaginatedParams) ([]Territory, error) {
	rows, err := q.db.QueryContext(ctx, getTerritoriesPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Territory
	for rows.Next() {
		var i Territory
		if err := rows.Scan(
			&i.ID,
			&i.TerritoryNumber,
			&i.Location,
			&i.Shapefile,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTerritoryByID = `-- name: GetTerritoryByID :one
SELECT id, territory_number, location, shapefile, completed_at FROM territories WHERE id = $1
`

func (q *Queries) GetTerritoryByID(ctx context.Context, id int64) (Territory, error) {
	row := q.db.QueryRowContext(ctx, getTerritoryByID, id)
	var i Territory
	err := row.Scan(
		&i.ID,
		&i.TerritoryNumber,
		&i.Location,
		&i.Shapefile,
		&i.CompletedAt,
	)
	return i, err
}

const markTerritoryAsCompleted = `-- name: MarkTerritoryAsCompleted :exec
UPDATE territories SET completed_at = $2 WHERE id = $1
`

type MarkTerritoryAsCompletedParams struct {
	ID          int64        `json:"id"`
	CompletedAt sql.NullTime `json:"completedAt"`
}

func (q *Queries) MarkTerritoryAsCompleted(ctx context.Context, arg MarkTerritoryAsCompletedParams) error {
	_, err := q.db.ExecContext(ctx, markTerritoryAsCompleted, arg.ID, arg.CompletedAt)
	return err
}

const reopenTerritory = `-- name: ReopenTerritory :exec
UPDATE territories SET completed_at = NULL WHERE id = $1
`

func (q *Queries) ReopenTerritory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, reopenTerritory, id)
	return err
}
