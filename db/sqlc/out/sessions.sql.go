// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sessions.sql

package board

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, room_id, session_type_id)
VALUES ($1, $2, $3) RETURNING id, room_id, session_type_id
`

type CreateSessionParams struct {
	ID            int64 `json:"id"`
	RoomID        int64 `json:"roomId"`
	SessionTypeID int32 `json:"sessionTypeId"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.RoomID, arg.SessionTypeID)
	var i Session
	err := row.Scan(&i.ID, &i.RoomID, &i.SessionTypeID)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSessionsByRoom = `-- name: GetSessionsByRoom :many
SELECT id, room_id, session_type_id FROM sessions WHERE room_id = $1
`

func (q *Queries) GetSessionsByRoom(ctx context.Context, roomID int64) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(&i.ID, &i.RoomID, &i.SessionTypeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions SET session_type_id = $2 WHERE id = $1
`

type UpdateSessionParams struct {
	ID            int64 `json:"id"`
	SessionTypeID int32 `json:"sessionTypeId"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession, arg.ID, arg.SessionTypeID)
	return err
}
