// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: enums.sql

package board

import (
	"context"
)

const getEnumAssignmentTypes = `-- name: GetEnumAssignmentTypes :many
SELECT unnest(enum_range(NULL::assignment_type_enum)) AS value
`

func (q *Queries) GetEnumAssignmentTypes(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getEnumAssignmentTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var value interface{}
		if err := rows.Scan(&value); err != nil {
			return nil, err
		}
		items = append(items, value)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnumCleaningTypes = `-- name: GetEnumCleaningTypes :many
SELECT unnest(enum_range(NULL::cleaning_type_enum)) AS value
`

func (q *Queries) GetEnumCleaningTypes(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getEnumCleaningTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var value interface{}
		if err := rows.Scan(&value); err != nil {
			return nil, err
		}
		items = append(items, value)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnumMeetingTypes = `-- name: GetEnumMeetingTypes :many
SELECT unnest(enum_range(NULL::meeting_type_enum)) AS value
`

func (q *Queries) GetEnumMeetingTypes(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getEnumMeetingTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var value interface{}
		if err := rows.Scan(&value); err != nil {
			return nil, err
		}
		items = append(items, value)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
