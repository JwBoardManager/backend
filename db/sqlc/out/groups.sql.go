// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: groups.sql

package board

import (
	"context"
	"database/sql"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (id, name, leader_id, assistant_id)
VALUES ($1, $2, $3, $4) RETURNING id, name, leader_id, assistant_id
`

type CreateGroupParams struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	LeaderID    int64         `json:"leaderId"`
	AssistantID sql.NullInt64 `json:"assistantId"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup,
		arg.ID,
		arg.Name,
		arg.LeaderID,
		arg.AssistantID,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LeaderID,
		&i.AssistantID,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, name, leader_id, assistant_id FROM groups WHERE id = $1
`

func (q *Queries) GetGroupByID(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LeaderID,
		&i.AssistantID,
	)
	return i, err
}

const updateGroup = `-- name: UpdateGroup :exec
UPDATE groups SET name = $2, leader_id = $3, assistant_id = $4 WHERE id = $1
`

type UpdateGroupParams struct {
	ID          int64         `json:"id"`
	Name        string        `json:"name"`
	LeaderID    int64         `json:"leaderId"`
	AssistantID sql.NullInt64 `json:"assistantId"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateGroup,
		arg.ID,
		arg.Name,
		arg.LeaderID,
		arg.AssistantID,
	)
	return err
}
