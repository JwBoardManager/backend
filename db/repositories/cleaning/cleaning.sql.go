// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cleaning.sql

package cleaning

import (
	"context"
)

const assignCleaning = `-- name: AssignCleaning :one
INSERT INTO cleaning_assignments (id, group_id, meeting_id, cleaning_type)
VALUES ($1, $2, $3, $4) RETURNING id, group_id, meeting_id, cleaning_type
`

type AssignCleaningParams struct {
	ID           int64  `json:"id"`
	GroupID      int64  `json:"groupId"`
	MeetingID    int64  `json:"meetingId"`
	CleaningType string `json:"cleaningType"`
}

func (q *Queries) AssignCleaning(ctx context.Context, arg AssignCleaningParams) (CleaningAssignment, error) {
	row := q.db.QueryRowContext(ctx, assignCleaning,
		arg.ID,
		arg.GroupID,
		arg.MeetingID,
		arg.CleaningType,
	)
	var i CleaningAssignment
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.MeetingID,
		&i.CleaningType,
	)
	return i, err
}

const deleteCleaningAssignment = `-- name: DeleteCleaningAssignment :exec
DELETE FROM cleaning_assignments WHERE id = $1
`

func (q *Queries) DeleteCleaningAssignment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCleaningAssignment, id)
	return err
}

const getCleaningAssignmentsByMeeting = `-- name: GetCleaningAssignmentsByMeeting :many
SELECT id, group_id, meeting_id, cleaning_type FROM cleaning_assignments WHERE meeting_id = $1
`

func (q *Queries) GetCleaningAssignmentsByMeeting(ctx context.Context, meetingID int64) ([]CleaningAssignment, error) {
	rows, err := q.db.QueryContext(ctx, getCleaningAssignmentsByMeeting, meetingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CleaningAssignment
	for rows.Next() {
		var i CleaningAssignment
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.MeetingID,
			&i.CleaningType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
