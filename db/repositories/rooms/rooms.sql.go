// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rooms.sql

package rooms

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (id, meeting_id, room_name)
VALUES ($1, $2, $3) RETURNING id, meeting_id, room_name
`

type CreateRoomParams struct {
	ID        int64  `json:"id"`
	MeetingID int64  `json:"meetingId"`
	RoomName  string `json:"roomName"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom, arg.ID, arg.MeetingID, arg.RoomName)
	var i Room
	err := row.Scan(&i.ID, &i.MeetingID, &i.RoomName)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, id)
	return err
}

const getRoomsByMeeting = `-- name: GetRoomsByMeeting :many
SELECT id, meeting_id, room_name FROM rooms WHERE meeting_id = $1
`

func (q *Queries) GetRoomsByMeeting(ctx context.Context, meetingID int64) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsByMeeting, meetingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.MeetingID, &i.RoomName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :exec
UPDATE rooms SET room_name = $2 WHERE id = $1
`

type UpdateRoomParams struct {
	ID       int64  `json:"id"`
	RoomName string `json:"roomName"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) error {
	_, err := q.db.ExecContext(ctx, updateRoom, arg.ID, arg.RoomName)
	return err
}
