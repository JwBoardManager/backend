// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: carts.sql

package carts

import (
	"context"
	"database/sql"
)

const createCart = `-- name: CreateCart :one
INSERT INTO carts (id, location, description)
VALUES ($1, $2, $3) RETURNING id, location, description
`

type CreateCartParams struct {
	ID          int64          `json:"id"`
	Location    string         `json:"location"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, createCart, arg.ID, arg.Location, arg.Description)
	var i Cart
	err := row.Scan(&i.ID, &i.Location, &i.Description)
	return i, err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM carts WHERE id = $1
`

func (q *Queries) DeleteCart(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCart, id)
	return err
}

const getAllCarts = `-- name: GetAllCarts :many
SELECT id, location, description FROM carts
`

func (q *Queries) GetAllCarts(ctx context.Context) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, getAllCarts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(&i.ID, &i.Location, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCart = `-- name: UpdateCart :exec
UPDATE carts SET location = $2, description = $3 WHERE id = $1
`

type UpdateCartParams struct {
	ID          int64          `json:"id"`
	Location    string         `json:"location"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) error {
	_, err := q.db.ExecContext(ctx, updateCart, arg.ID, arg.Location, arg.Description)
	return err
}
